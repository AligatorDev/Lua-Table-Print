function row(a,b)b=b or{}assert(b==nil or type(b)=="table","Config need be a object or nil")assert(type(a)=="table","Values need be a lua \"array\" ")local c={"│","─","┌","└","├","┬","┴","┼","┤","┘","┐"}if not print.config.extendedASCII then c={"|","-","|","|","|","---","---","---","|","|","|"}end;local d=b.hidehead or false;local e=b.lastrow or false;local f=b.forcewidth or{}local g=b.hidefoot or false;local h=c[1].."   "local i=c[3]local j=e and"\n"..c[4]or"\n"..c[5]for k,l in ipairs(a)do l=tostring(l)local m=RealCount(l)local n=f[k]and string.rep(" ",f[k]-m)or""local o=l..n.."   "..c[1]..(k==#a and""or"   ")local p=RealCount(o)h=h..o;if not d then i=i..string.rep(c[2],p-k-(k==#a and-(k-3)or 3-k))..(k==#a and""or c[6])end;if not g then j=j..string.rep(c[2],p-k-(k==#a and-(k-3)or 3-k))..(k==#a and""or(e and c[7]or c[8]))end end;if not d then i=i..c[11].."\n"end;j=j..(e and c[10]or c[9])return(not d and i or"")..h:sub(0,#h-6)..c[1]..(not g and j or"")end;function fmtstr(h)return h end;function have(q,r)for s,l in ipairs(q)do if l==r then return true end end end;function MakeTable(q)local t={{}}for k,l in ipairs(q)do for u,v in pairs(l)do if not have(t[1],u)then table.insert(t[1],u)end end end;table.sort(t[1],function(w,x)return w=="(index)"end)for k,l in ipairs(q)do local y={}for s,z in ipairs(t[1])do table.insert(y,l[z]or"  ")end;table.insert(t,y)end;local A={}for k,l in ipairs(t)do for u,v in ipairs(l)do v=tostring(v)if not A[u]then A[u]=0 end;if A[u]<#v then A[u]=#v end end end;local B={}for C,l in ipairs(t)do table.insert(B,row(l,{forcewidth=A,hidehead=C~=1,hidefoot=C~=#t and C~=1,lastrow=C==#t}))end;return table.concat(B,"\n")end;local D={reset=0,bright=1,dim=2,underline=4,blink=5,reverse=7,hidden=8,black=30,red=31,green=32,yellow=33,blue=34,magenta=35,cyan=36,white=37,blackbg=40,redbg=41,greenbg=42,yellowbg=43,bluebg=44,magentabg=45,cyanbg=46,whitebg=47}function getFakeLength(h)local E=0;local F=0;for C=1,#h do local G=h:byte(C)if G>127 then F=F+1 else F=0 end;if F==4 then E=E+2;F=0 end end;return E end;function RealCount(h)local H=getFakeLength(h)local h,I=string.gsub(h,"\27%[%d+m","")return#h-H end;colors=setmetatable({},{__index=function(y,J)if not D[J]then return end;return function(h)h=tostring(h)h=h:gsub("\27%[%d+m","")return('\27[%dm'):format(D[J])..h..('\27[%dm'):format(0)end end})function snt(K)local L=type(K)if L=="string"then K=print.colors.green("'"..K:gsub("\n","\\n"):gsub("\r","\\r").."'")elseif L=="number"then local s,M=math.modf(K)local l=tostring(math.floor(K*100)/100)if M==0 then l=l:sub(0,#l-2)end;K=print.colors.yellow(l)end;return tostring(K)end;function snt2(K)local L=type(K)if L=="string"then K=K:gsub("\n","\\n"):gsub("\r","\\r")elseif L=="number"then K=print.colors.yellow(math.floor(K*100)/100)end;return tostring(K)end;local N={colors=colors,table=function(O,b)b=b or{}assert(type(O)=="table","You must send a table value!")local P=b.onlygen;local Q=b.hideindex;local R=b.hidevalue;local M={}for S,r in pairs(O)do local x={}if type(r)=="table"then for k,l in pairs(r)do if type(k)=="string"then x[snt2(k)]=snt(l)end end end;if not Q then x["(index)"]=snt(S)end;if not R then x["value"]=snt(r)end;table.insert(M,x)end;local d="\n"..MakeTable(M)b.allcolor=b.allcolor or"green"local T=print.colors[b.allcolor]assert(T,"That color doesn't exists!")local U=T(""):gsub("\27%[0m","")d=U..d:gsub("\27%[0m","\27[0m"..U).."\27[0m"if not P then print(d)else return d end end,config={extendedASCII=true}}local V=print;print=setmetatable({},{__call=function(s,...)V(...)end,__index=N})
